What happens when you initialize a repository? Why do you need to do it?

To initialize a repository you use the command 'git init' in the directory where you want the repository.  Git then starts a repository but does not make an initial commit - you need to do that.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is a holding pen of items that are waiting to be part of a commit.  The reflect changes in items that are in the working directory but not yet reflected in the repository with a commit

*** PROBLEM WITH NOTEPAD++  -- SOLVED!!!! ***
http://www.kitware.com/blog/home/post/85  
need to run the following command: 
git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe'\ -multiInst -notabbar -nosession -noPlugin"

How can you use the staging area to make sure you have one commit per logical change?
Use the git diff --staged command to see the differences between the files in the staging area and the most recent commit.  If the commit makes sense, go for it.  If not, add or remove files until it makes sense.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are helpful when you want to try something out that you aren't sure will work. It gives you a space to play with really different ideas while keeping the linear flow of your development intact.

How do the diagrams help you visualize the branch structure?
The diagram shows the importance of managing branches.  Changes that are not on a branch are lost, which is great if they don't work but a problem if they are something you want to keep

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging the two branches combines the code from the two branches.  We show it in the diagram as part of the path

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
The pro is that it is a real time saver. Git makes smart decisions about what to keep and what's a conflict.  Can't think of a con other than it's not perfect which means you will have to do some conflict resolution.